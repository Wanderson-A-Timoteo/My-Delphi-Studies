unit Classe.Calculadora;

interface

uses
  Calculadora.Interfaces, System.SysUtils, Controls, System.Generics.Collections,
  Calculadora.Helpers, Calculadora.Somar, Calculadora.Subtrair, Calculadora.Dividir,
  Calculadora.Multiplicar;

type
  // Classe
  TCalculadora = class(TInterfacedObject, ICalculadora)
  private
    FLista : TList<Double>;

  public
    constructor Create;
    destructor Destroy; override;

    class function New: ICalculadora;

    function Add(Value : String) : ICalculadora; overload;
    function Add(Value : Integer) : ICalculadora; overload;
    function Add(Value : Currency) : ICalculadora; overload;

    function Somar: IOperacoes;
    function Subtrair: IOperacoes;
    function Dividir: IOperacoes;
    function Multiplicar: IOperacoes;
  end;


implementation


{ TCalculadora }

function TCalculadora.Add(Value: String): ICalculadora;
begin
  Result := Self;
  //FLista.Add(Value.ToCurrency);
  FLista.Add(Value.ToDouble);
end;

function TCalculadora.Add(Value: Integer): ICalculadora;
begin
  Result := Self;
  FLista.Add(Value.ToDouble);
end;

function TCalculadora.Add(Value: Currency): ICalculadora;
begin
  Result := Self;
  FLista.Add(Value);
end;

constructor TCalculadora.Create;
begin
  FLista := TList<Double>.Create;
end;

destructor TCalculadora.Destroy;
begin
  FLista.Free;
  inherited;
end;

function TCalculadora.Dividir: IOperacoes;
begin
  Result := TDividir.New;
end;

function TCalculadora.Multiplicar: IOperacoes;
begin
  Result := TMultiplicar.New;
end;

class function TCalculadora.New: ICalculadora;
begin
  Result := Self.Create;
end;

function TCalculadora.Somar: IOperacoes;
begin
Result := TSomar.New;
end;

function TCalculadora.Subtrair: IOperacoes;
begin
  Result := TSubtrair.New;
end;


end.
