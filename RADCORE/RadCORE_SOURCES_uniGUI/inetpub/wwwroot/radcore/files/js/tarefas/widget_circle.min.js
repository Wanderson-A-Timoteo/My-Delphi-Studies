"use strict";
! function(t) {
    function i(t) {
        this.init(t)
    }
    i.prototype = {
        value: 10,
        total: 100,
        mstyle: 0,
        title: "title",
        caption: "caption",
        fgcolor: "#556b2f",
        bgcolor: "#eee",
        fill: !1,
        thik: 5,
        tfontsize: 35,
        cfontsize: 15,
        tfntname: "tahoma",
        cfntname: "arial",
        tfntcolor: "#556b2f",
        cfntcolor: "#eee",
        tclass: "",
        cclass: "",
        animationstep: 0,
        rotateanimationstep: 0,
        shadow: 0,
        constructor: i,
        startdegree: 0,
        enddegree: 150,
        dimension: 0,
        sRotate: 0,
        eRotate: 0,
        oThik: 10,
        cX: 0,
        cY: 0,
        tblBG: null,
        dvCaption: null,
        dvTitle: null,
        forceRedraw: !1,
        ctx: null,
        canvas: null,
        hwndAnimation: null,
        hwndAnimationR: null,
        getValue: function() {
            return this.value
        },
        setValue: function(t) {
            var i = this;
            this.value = t, this.startdegree = 0, this.enddegree = this.value / this.total * 360 + this.startdegree, this.hwndAnimation = requestAnimationFrame(function() {
                i.animate(0)
            })
        },
        getTotal: function() {
            return this.total
        },
        setTotal: function(t) {
            this.total = t;
            var i = this;
            this.startdegree = 0, this.enddegree = this.value / this.total * 360 + this.startdegree, this.hwndAnimation = requestAnimationFrame(function() {
                i.animate(0)
            })
        },
        getMstyle: function() {
            return this.mstyle
        },
        setMstyle: function(t) {
            this.mstyle = t
        },
        getTitle: function() {
            return this.title
        },
        setTitle: function(i) {
            this.title = i, t(this.dvTitle).text(this.title)
        },
        getCaption: function() {
            return this.caption
        },
        setCaption: function(i) {
            this.caption = i, t(this.dvCaption).text(this.caption)
        },
        init: function(i) {
            var e = this;
            t.extend(this, i), this.initWidget(), t.event.special.debouncedresize.threshold = 250, t(window).bind("debouncedresize", function() {
                t(e.canvas).attr("width", 1).attr("height", 1), e.dimension = e.el.parent().width() >= e.el.parent().height() ? e.el.parent().height() : e.el.parent().width(), e.calcCenterXY(), t(e.canvas).attr("width", e.dimension).attr("height", e.dimension), t(e.tblBG).remove(), e.drawTitle(), e.justDraw = !0, t(e.canvas).css({
                    left: e.cX + "px"
                }), t(e.canvas).css({
                    top: e.cY + "px"
                })
            })
        },
        initWidget: function() {
            var t = this;
            this.oThik = this.thik, t.dimension = this.el.parent().width() >= this.el.parent().height() ? this.el.parent().height() : this.el.parent().width(), this.calcCenterXY(), this.createCanvas(), this.drawTitle(), this.startdegree = 0, this.enddegree = this.value / this.total * 360 + this.startdegree, this.hwndAnimation = requestAnimationFrame(function() {
                t.animate(0)
            })
        },
        calcCenterXY: function() {
            this.cX = (this.el.parent().width() - this.dimension) / 2, this.cY = (this.el.parent().height() - this.dimension) / 2, this.thik = this.oThik * this.dimension * .0031, console.log("parent.width:" + this.el.parent().width() + " , dimension:" + this.dimension + " , cX:" + this.cX)
        },
        createCanvas: function() {
            var i = this.dimension;
            this.canvas = t('<canvas style="position:relative;display:block;"></canvas>').attr({
                width: i,
                height: i
            }).appendTo(this.el)[0], t(this.canvas).css({
                left: this.cX + "px"
            }), t(this.canvas).css({
                top: this.cY + "px"
            }), this.ctx = this.canvas.getContext("2d")
        },
        drawBGCircle: function() {
            var t = Math.floor(this.dimension / 2),
                i = Math.floor(this.dimension / 2),
                e = Math.floor(this.dimension / 2);
            e -= this.thik / 1.5, this.ctx.lineWidth = this.thik, 0 >= e && (e = 1), this.ctx.shadowBlur = 0, this.ctx.shadowColor = "rgba(0,0,0,.2)", this.ctx.shadowOffsetX = 0, this.ctx.shadowOffsetY = 0, this.ctx.strokeStyle = this.bgcolor, this.ctx.beginPath(), this.ctx.arc(t, i, e, 0, 2 * Math.PI, !0), this.ctx.stroke()
        },
        drawFrontCircle: function(t, i) {
            var e = Math.floor(this.dimension / 2),
                s = Math.floor(this.dimension / 2),
                n = Math.floor(this.dimension / 2);
            n -= this.thik / 1.5, this.ctx.clearRect(0, 0, this.dimension, this.dimension), this.drawBGCircle(), this.ctx.lineWidth = this.thik, 1 == this.mstyle ? (this.ctx.lineWidth = this.thik + .666666 * this.thik, n -= this.thik / 2) : 2 == this.mstyle && (this.ctx.lineWidth = this.thik + .666666 * this.thik, n -= 2 * this.thik), 0 >= n && (n = 1), 1 == this.shadow && (this.ctx.shadowBlur = 2, this.ctx.shadowColor = "rgba(0,0,0,0.2)", this.ctx.shadowOffsetX = 2, this.ctx.shadowOffsetY = 2), this.ctx.strokeStyle = this.fgcolor, this.ctx.beginPath(), this.ctx.arc(e, s, n, t, i, !1), this.ctx.stroke()
        },
        animate: function(t) {
            var i = this,
                e = this.startdegree;
            this.animationstep > 0 ? (this.drawFrontCircle(this.getRadian(e), this.getRadian(t)), t += this.animationstep, t <= this.enddegree ? this.hwndAnimation = requestAnimationFrame(function() {
                i.animate(t)
            }) : (this.sRotate = this.startdegree, this.eRotate = this.enddegree, this.hwndAnimationR = requestAnimationFrame(function() {
                i.animateRotation()
            }))) : (this.drawFrontCircle(this.getRadian(e), this.getRadian(this.enddegree)), this.rotateanimationstep > 0 && (this.sRotate = this.startdegree, this.eRotate = this.enddegree, this.hwndAnimationR = requestAnimationFrame(function() {
                i.animateRotation()
            })))
        },
        animateRotation: function() {
            var t = this;
            this.forceRedraw && (this.sRotate = this.startdegree, this.eRotate = this.enddegree, drawFrontCircle(getRadian(this.startdegree), getRadian(this.enddegree)), this.forceRedraw = !1), this.sRotate >= 360 - this.startdegree && (this.sRotate = this.startdegree, this.eRotate = this.enddegree), this.sRotate += this.rotateanimationstep, this.eRotate += this.rotateanimationstep, this.drawFrontCircle(this.getRadian(this.sRotate), this.getRadian(this.eRotate)), this.hwndAnimationR = requestAnimationFrame(function() {
                t.animateRotation()
            })
        },
        drawTitle: function() {
            var i = t("<table></table>").appendTo(this.el)[0];
            this.tblBG = i;
            var e = t("<tr></tr>").appendTo(i).get(0),
                s = t("<td></td>").appendTo(e).get(0),
                n = .28 * this.dimension,
                a = .062 * this.dimension;
            this.dvTitle = t("<div></div>").appendTo(s).get(0), this.dvCaption = t("<div></div>").appendTo(s).get(0);
            var h = "-" + this.dimension.toString() + "px";
            t(i).css({
                width: this.dimension.toString() + "px"
            }), t(i).css({
                height: this.dimension.toString() + "px"
            }), t(i).css({
                "vertical-align": "middle"
            }), t(i).css({
                position: "relative"
            }), t(i).css({
                "margin-top": h
            }), t(i).css({
                font: "14px Tahoma, Helvetica, sans-serif"
            }), t(i).css({
                "text-align": "center"
            }), t(i).css({
                left: this.cX + "px"
            }), t(i).css({
                top: this.cY + "px"
            }), this.setTitle(this.title), this.setCaption(this.caption), "" != this.tid && (t(this.dvTitle).attr({
                id: this.tid
            }), t(s).css({
                cursor: "pointer"
            })), "" != this.tclass ? t(this.dvTitle).addClass(this.tclass) : (t(this.dvTitle).css({
                "font-size": n + "px"
            }), t(this.dvTitle).css({
                color: this.tfntcolor
            })), "" != this.cclass ? t(dvCaption).addClass(this.cclass) : (t(this.dvCaption).css({
                "font-size": a + "px"
            }), t(this.dvCaption).css({
                color: this.cfntcolor
            }))
        },
        getRadian: function(t) {
            return t -= 90, t * Math.PI / 180
        }
    }, t.circleProgress = {
        defaults: i.prototype
    }, t.fn.circleProgress = function(e, s) {
        var n = "circle-progress",
            a = this.data(n);
        if ("widget" == e) {
            if (!a) throw Error('Calling "widget" method on not initialized instance is forbidden');
            return a.canvas
        }
        if ("title" == e) {
            if (!a) throw Error('Calling "title" method on not initialized instance is forbidden');
            if ("undefined" == typeof s) return a.getTitle();
            var h = arguments[1];
            return this.each(function() {
                t(this).data(n).setTitle(h)
            })
        }
        if ("caption" == e) {
            if (!a) throw Error('Calling "caption" method on not initialized instance is forbidden');
            if ("undefined" == typeof s) return a.getCaption();
            var h = arguments[1];
            return this.each(function() {
                t(this).data(n).setCaption(h)
            })
        }
        if ("value" == e) {
            if (!a) throw Error('Calling "value" method on not initialized instance is forbidden');
            if ("undefined" == typeof s) return a.getValue();
            var h = arguments[1];
            return this.each(function() {
                t(this).data(n).setValue(h)
            })
        }
        if ("total" == e) {
            if (!a) throw Error('Calling "total" method on not initialized instance is forbidden');
            if ("undefined" == typeof s) return a.getTotal();
            var h = arguments[1];
            return this.each(function() {
                t(this).data(n).setTotal(h)
            })
        }
        return this.each(function() {
            var s = t(this),
                a = s.data(n),
                h = t.isPlainObject(e) ? e : {};
            if (a) a.init(h);
            else {
                var o = t.extend({}, s.data());
                "string" == typeof o.fill && (o.fill = JSON.parse(o.fill)), h = t.extend(o, h), h.el = s, a = new i(h), s.data(n, a)
            }
        })
    }
}(jQuery);