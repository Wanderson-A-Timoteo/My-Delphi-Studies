unit SimplePed.Controller.PedidoItens;

interface

uses
  SimplePed.Controller.Pedido.Interfaces, SimplePed.Model.Pedido.Interfaces,
  Data.DB, SimplePed.Model.Entidade.PedidoItens, System.Generics.Collections;

Type
  TControllerPedidoItens = class(TInterfacedObject, iControllerPedidoItens)
  private
    FModel : iModelPedidoItens;
    FDataSource : TDataSource;
    FList : TObjectList<TPEDIDOITENS>;
  public
    constructor Create;
    destructor Destroy; override;
    class function New: iControllerPedidoItens;
    function DataSource(aDataSource: TDataSource): iControllerPedidoItens;
    function Buscar: iControllerPedidoItens; overload;
    function Buscar(aId: Integer): iControllerPedidoItens; overload;
    function Insert: iControllerPedidoItens;
    function Delete: iControllerPedidoItens;
    function Update: iControllerPedidoItens;
    function Entidade: TPEDIDOITENS;
  end;

implementation

{ TControllerPedidoItens }

function TControllerPedidoItens.Buscar: iControllerPedidoItens;
begin
  Result := Self;

  if Assigned(FList) then
    FList.Free;

  FList := FModel.DAO.Find;
end;

function TControllerPedidoItens.Buscar(aId: Integer): iControllerPedidoItens;
begin

end;

constructor TControllerPedidoItens.Create;
begin

end;

function TControllerPedidoItens.DataSource(
  aDataSource: TDataSource): iControllerPedidoItens;
begin

end;

function TControllerPedidoItens.Delete: iControllerPedidoItens;
begin

end;

destructor TControllerPedidoItens.Destroy;
begin

  if Assigned(FList) then
    FList.Free;

  inherited;
end;

function TControllerPedidoItens.Entidade: TPEDIDOITENS;
begin

end;

function TControllerPedidoItens.Insert: iControllerPedidoItens;
begin

end;

class function TControllerPedidoItens.New: iControllerPedidoItens;
begin
  Result := Self.Create;
end;

function TControllerPedidoItens.Update: iControllerPedidoItens;
begin

end;

end.
